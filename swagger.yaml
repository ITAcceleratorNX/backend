openapi: 3.0.0
info:
  title: Auth API + WebSocket Chat
  version: 1.0.1
  description: |
    Документация по авторизации и WebSocket чату.

servers:
  - url: https://extraspace-backend.onrender.com

paths:
  /logout:
    get:
      tags:
        - Auth
      summary: Выход из аккаунта
      description: Удаляет JWT токен из cookies, тем самым выполняя logout пользователя.
      responses:
        '200':
          description: Успешный выход
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Успешный выход.
        '500':
          description: Внутренняя ошибка сервера
  /auth/google:
    get:
      summary: Авторизация через Google
      tags:
        - Auth
      description: Редиректит на Google OAuth
      responses:
        '302':
          description: Редирект на Google

  /auth/google/callback:
    get:
      summary: Callback после Google OAuth
      tags:
        - Auth
      responses:
        '302':
          description: Редирект на главную страницу при успехе или неудаче

  /auth/email:
    post:
      summary: Проверка email — зарегистрирован или нет
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email]
              properties:
                email:
                  type: string
                  example: user@example.com
      responses:
        '200':
          description: Информация о наличии пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_exists:
                    type: boolean
                  email:
                    type: string
        '400':
          description: Email не передан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Email is required
        '500':
          description: Внутренняя ошибка

  /auth/login:
    post:
      summary: Логин пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: mypassword123
      responses:
        '200':
          description: Успешный логин
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '400':
          description: Ошибка валидации или неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [{
                        "field": "password",
                        "message": "Required"
                      }]
        '401':
          description: Ошибка аутентификций
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "message": "Invalid email or password"
                      } ]

  /auth/register:
    post:
      summary: Регистрация пользователя
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password, unique_code]
              properties:
                email:
                  type: string
                  example: user@example.com
                unique_code:
                  type: string
                  example: "123456"
                password:
                  type: string
                  example: mypassword123
      responses:
        '201':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
        '400':
          description: Ошибка валидации или неверные данные
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "field": "password",
                        "message": "Required"
                      } ]
        '401':
          description: Ошибка авторизаций
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "message": "Invalid email or password"
                      } ]
  /chats/{chatId}/messages:
    get:
      tags:
        - Chat
      summary: Получить сообщения чата с пагинацией
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: integer
        - in: query
          name: beforeId
          schema:
            type: integer
          description: Вернуть сообщения до указанного ID
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          description: Максимум сообщений
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  hasMore:
                    type: boolean
    delete:
      summary: Удалить все сообщения
      tags:
        - Chat
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Успешно

  /chats/{chatId}/manager:
    put:
      summary: Назначить менеджера
      tags:
        - Chat
      parameters:
        - in: path
          name: chatId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [newManagerId]
              properties:
                newManagerId:
                  type: integer
      responses:
        '200':
          description: OK

  /auth/check-email:
    post:
      tags:
        - Auth
      summary: Проверка существования email
      description: Это нужно для отправить перед восстановление пароля.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Успешная проверка email
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_exists:
                    type: boolean
                  email:
                    type: string
        "400":
          description: Email не передан
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "field": "password",
                        "message": "Required"
                      } ]

  /auth/restore-password:
    post:
      summary: Восстановление пароля
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - unique_code
                - password
              properties:
                email:
                  type: string
                  format: email
                unique_code:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        "200":
          description: Пароль успешно восстановлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        "400":
          description: Ошибка валидации или неправильный код
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "field": "password",
                        "message": "Required"
                      } ]
        '401':
          description: Ошибка аутентикаций
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  details:
                    type: array
                    example:
                      [ {
                        "message": "Invalid email or password"
                      } ]
        "500":
          description: Внутренняя ошибка сервера
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
  /faq:
    get:
      tags:
        - FAQ
      summary: Получить все вопросы FAQ
      responses:
        '200':
          description: Список FAQ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FAQ'

    post:
      tags:
        - FAQ
      summary: Создать новый FAQ (только для ADMIN и MANAGER)
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQInput'
      responses:
        '201':
          description: FAQ успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
        '403':
          description: Доступ запрещён

  /faq/{id}:
    get:
      tags:
        - FAQ
      summary: Получить FAQ по ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Найденный FAQ
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FAQ'
        '404':
          description: Не найден

    put:
      tags:
        - FAQ
      summary: Обновить FAQ по ID (только для ADMIN и MANAGER)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FAQUpdate'
      responses:
        '200':
          description: Обновление прошло успешно
        '404':
          description: Не найден

    delete:
      tags:
        - FAQ
      summary: Удалить FAQ по ID (только для ADMIN и MANAGER)
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Удаление прошло успешно
        '404':
          description: Не найден

  /prices:
    get:
      tags:
        - Price
      summary: Получить все цены
      responses:
        200:
          description: Список всех цен
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Price'
    post:
      tags:
        - Price
      summary: Создать новую цену (только для ADMIN и MANAGER)
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceDto'
      responses:
        201:
          description: Успешное создание
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        400:
          description: Неверные данные или цена уже существует

  /prices/{type}:
    get:
      tags:
        - Price
      summary: Получить цену по типу
      parameters:
        - in: path
          name: type
          required: true
          schema:
            $ref: '#/components/schemas/PriceType'
      responses:
        200:
          description: Найденная цена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Price'
        400:
          description: Неверный тип
        404:
          description: Цена не найдена

  /prices/{id}:
    put:
      tags:
        - Price
      summary: Обновить цену (только для ADMIN и MANAGER)
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePriceDto'
      responses:
        200:
          description: Успешное обновление
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated:
                    type: integer
        400:
          description: Неверный ID
        404:
          description: Цена не найдена

    delete:
      tags:
        - Price
      summary: Удалить цену (только для ADMIN и MANAGER)
      security:
        - cookieAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Успешное удаление
          content:
            application/json:
              schema:
                type: object
                properties:
                  deleted:
                    type: integer
        400:
          description: Неверный ID
        404:
          description: Цена не найдена

  /users:
    get:
      tags:
        - User
      summary: Get all users (ADMIN и MANAGER)
      security:
        - cookieAuth: [ ]
      responses:
        200:
          description: List of users
        403:
          description: Forbidden (Admin only)
        401:
          description: Unauthorized (no token)

  /users/me:
    get:
      tags:
        - User
      summary: Get user info
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User found
        404:
          description: User not found
        401:
          description: Unauthorized

    put:
      tags:
        - User
      summary: Update user
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        200:
          description: User updated
        400:
          description: Validation or bad request
        404:
          description: User not found
        401:
          description: Unauthorized

    delete:
      tags:
        - User
      summary: Delete user
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: User deleted
        404:
          description: User not found
        401:
          description: Unauthorized

  /warehouses:
    post:
      tags:
        - Warehouse
      summary: Create a new warehouse (Admin and MANAGER)
      security:
        - cookieAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseDto'
      responses:
        201:
          description: Warehouse created successfully
        400:
          description: Bad request (validation error or other issues)
        401:
          description: Unauthorized (no token)
        403:
          description: Forbidden (only for Admin)

    get:
      tags:
        - Warehouse
      summary: Get all warehouses
      responses:
        200:
          description: List of all warehouses
        401:
          description: Unauthorized (no token)

  /warehouses/{id}:
    get:
      tags:
        - Warehouse
      summary: Get warehouse by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Warehouse found
        404:
          description: Warehouse not found
        401:
          description: Unauthorized (no token)

    put:
      tags:
        - Warehouse
      summary: Update warehouse by ID (Admin and MANAGER)
      security:
        - cookieAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseUpdateDto'
      responses:
        200:
          description: Warehouse updated successfully
        400:
          description: Bad request (validation error)
        404:
          description: Warehouse not found
        401:
          description: Unauthorized (no token)
        403:
          description: Forbidden (only for Admin)


# --- WebSocket documentation section (non-standard) ---
components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: integer
        chat_id:
          type: integer
        sender_id:
          type: integer
        message:
          type: string
        is_from_user:
          type: boolean
        created_at:
          type: string
          format: date-time

    Chat:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        manager_id:
          type: integer
        created_at:
          type: string
          format: date-time

    WebSocketMessage:
      type: object
      required: [type]
      properties:
        type:
          type: string
          example: START_CHAT
        userId:
          type: integer
          example: 5
        chatId:
          type: integer
          example: 1
        senderId:
          type: integer
          example: 5
        message:
          type: string
          example: "Привет!"
        isFromUser:
          type: boolean
          example: true
        managerId:
          type: integer
          example: 2

    FAQ:
      type: object
      properties:
        id:
          type: integer
          example: 1
        question:
          type: string
          example: "Как арендовать склад?"
        answer:
          type: string
          example: "Вы можете оставить заявку через сайт или связаться с менеджером."
        type:
          type: string
          example: "general"

    FAQInput:
      type: object
      required:
        - question
        - answer
        - type
      properties:
        question:
          type: string
          example: "Как оплатить аренду?"
        answer:
          type: string
          example: "Через личный кабинет или в отделении."
        type:
          type: string
          example: "payment"

    FAQUpdate:
      type: object
      properties:
        question:
          type: string
          example: "Обновленный вопрос"
        answer:
          type: string
          example: "Обновленный ответ"
        type:
          type: string
          example: "general"

    PriceType:
      type: string
      enum:
        - INDIVIDUAL_STORAGE
        - CLOUD_STORAGE
        - RACK_STORAGE
        - MOVING

    PriceDto:
      type: object
      required:
        - type
        - amount
      properties:
        type:
          $ref: '#/components/schemas/PriceType'
        amount:
          type: number
          format: float
          minimum: 0.01

    UpdatePriceDto:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/PriceType'
        amount:
          type: number
          format: float
          minimum: 0.01

    Price:
      type: object
      properties:
        id:
          type: integer
        type:
          $ref: '#/components/schemas/PriceType'
        amount:
          type: number

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "user@example.com"
        phone:
          type: string
          example: "+77011234567"
        iin:
          type: string
          example: "010101123456"

    WarehouseDto:
      type: object
      properties:
        name:
          type: string
          example: "Main Warehouse"
        address:
          type: string
          example: "123 Main St, City, Country"
        status:
          type: string
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "AVAILABLE"

    WarehouseUpdateDto:
      type: object
      properties:
        name:
          type: string
          example: "Updated Warehouse Name"
        address:
          type: string
          example: "456 Updated St, City, Country"
        status:
          type: string
          enum:
            - AVAILABLE
            - UNAVAILABLE
          example: "UNAVAILABLE"
x-websocket:
  url: ws://localhost:3000?userId={userId}
  description: |
    WebSocket сервер для чатов.
    При подключении необходимо передать `userId` в query параметрах.

    **Типы входящих сообщений (от клиента):**
    - `START_CHAT`: создать чат
    - `SEND_MESSAGE`: отправить сообщение
    - `ACCEPT_CHAT`: менеджер принимает чат

    **Типы исходящих сообщений (от сервера):**
    - `WAITING_FOR_MANAGER`: ожидание ответа менеджера
    - `NEW_CHAT`: уведомление менеджерам о новом чате
    - `CHAT_ACCEPTED`: чат принят
    - `NEW_MESSAGE`: новое сообщение
    - `CHAT_TAKEN`: чат уже принят другим менеджером

  examples:
    START_CHAT:
      summary: Начать чат
      value:
        type: START_CHAT
        userId: 5

    SEND_MESSAGE:
      summary: Отправка сообщения
      value:
        type: SEND_MESSAGE
        chatId: 1
        senderId: 5
        message: "Привет!"
        isFromUser: true

    ACCEPT_CHAT:
      summary: Принятие чата
      value:
        type: ACCEPT_CHAT
        chatId: 1
        managerId: 2

// üìÅ jwt.js (–±—ñ—Ä—ñ–∫—Ç—ñ—Ä—ñ–ª–≥–µ–Ω)
import jwt from 'jsonwebtoken';

const JWT_SECRET = process.env.JWT_SECRET || 'access-secret';
const REFRESH_SECRET = process.env.REFRESH_SECRET || 'refresh-secret';
const JWT_EXPIRES_IN = '15m';
const REFRESH_EXPIRES_IN = '7d';

// üîê Access token –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É
export function generateAccessToken(user) {
    return jwt.sign(
        { id: user.id, email: user.email, role: user.role_code },
        JWT_SECRET,
        { expiresIn: JWT_EXPIRES_IN }
    );
}

// üîÑ Refresh token –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–ª–∞—É
export function generateRefreshToken(user) {
    return jwt.sign(
        { id: user.user_id }, // ‚úÖ user_id –±–æ–ª—É—ã –∫–µ—Ä–µ–∫
        process.env.JWT_REFRESH_SECRET,
        { expiresIn: '7d' }
    );
}


// ‚úÖ Access token —Ç–µ–∫—Å–µ—Ä—É
export function verifyAccessToken(token) {
    return jwt.verify(token, JWT_SECRET);
}

// ‚úÖ Refresh token —Ç–µ–∫—Å–µ—Ä—É
export function verifyRefreshToken(token) {
    return jwt.verify(token, REFRESH_SECRET);
}

// üîí JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è Middleware
const authenticateJWT = (req, res, next) => {
    const token = req.header('Authorization')?.split(' ')[1];

    if (!token) {
        return res.status(401).json({ message: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.' });
    }

    jwt.verify(token, JWT_SECRET, (err, user) => {
        if (err) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.' });
        }
        req.user = user;
        next();
    });
};

export default authenticateJWT;